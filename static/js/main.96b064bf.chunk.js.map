{"version":3,"sources":["components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","styled","section","AccountBalance","props","buttonText","showBalance","showHideBalance","amount","className","onClick","handleBalanceVisibilityChange","Td","td","Coin","name","ticker","price","balance","action","method","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Img","img","Header","header","H1","h1","ExchangeHeader","src","logo","alt","Component","Div","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96b064bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"./AccountBalance.css\"\r\nimport styled from 'styled-components'\r\n\r\nconst Section = styled.section`\r\n    border: 1px solid red;\r\n    text-align: left;\r\n    padding: 1.5rem 0 1.5rem 5rem;\r\n`;\r\n\r\n\r\nexport default function AccountBalance(props) {\r\n        const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n        let showHideBalance = props.showBalance ? <>${props.amount}</> : null;\r\n        return (\r\n            <Section className = \"balanceDisplay\">\r\n            {showHideBalance}\r\n            <button onClick={props.handleBalanceVisibilityChange}>{buttonText}</button>\r\n            </Section>\r\n        );\r\n}\r\n\r\nAccountBalance.propTypes = { //typechecking\r\n    amount: PropTypes.number.isRequired\r\n}","import React from 'react'\r\n/* import \"./Coin.css\" */\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Td = styled.td`\r\n    border: 1px solid #cccc;\r\n    width: 25wh;\r\n`\r\n\r\nexport default function Coin(props) {\r\n\r\n    /* to auto refresh: \r\n    componentDidMount() {\r\n        const callback = () => {\r\n            // set new state\r\n            const randomPercentage = 0.995 + Math.random() * 0.01;\r\n            this.setState(function(oldState){\r\n                return{\r\n                    price:oldState.price * randomPercentage\r\n                };\r\n            })\r\n        }\r\n        setInterval(callback, 1000);\r\n    }\r\n    */\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        props.handleRefresh(props.tickerId);\r\n/*\r\n        const randomPercentage = 0.995 + Math.random() * 0.01;\r\n        this.setState(function(oldState){\r\n            return{\r\n                price: oldState.price * randomPercentage\r\n            };\r\n        })\r\n*/\r\n    }\r\n        return (\r\n                   <tr className=\"coin-row\">\r\n                    <Td>{props.name}</Td>\r\n                    <Td>{props.ticker}</Td>\r\n                    <Td>$ {props.price}</Td>\r\n                    {props.showBalance ? <Td>$ {props.balance}</Td> : null}\r\n                    <Td>\r\n                        <form action=\"#\" method=\"POST\">\r\n                            <button onClick={handleClick}>Refresh</button>\r\n                        </form>\r\n                    </Td>\r\n\r\n                   </tr>\r\n        )\r\n}\r\n\r\nCoin.propTypes = { //typechecking\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired,\r\n}","import React from 'react';\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components'\r\n\r\nconst Table = styled.table`\r\n    margin: 50px;\r\n    display: inline-block;\r\n    text-align: center;\r\n`\r\n\r\nexport default function CoinList(props){\r\n        return (\r\n            <Table className=\"coin-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Ticker</th>\r\n                        <th>Price</th>\r\n                        {props.showBalance ? <th>Balance</th> : null}\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    /* this.props.coinData.map(value => <Coin name={value.name} ticker={value.ticker} price={value.price}/>) */\r\n                    props.coinData.map( ({key, name, ticker, balance, price}) =>\r\n                        <Coin key={key}\r\n                            handleRefresh={props.handleRefresh}\r\n                            name={name}\r\n                            ticker={ticker}\r\n                            showBalance={props.showBalance}\r\n                            balance={balance}\r\n                            price={price}\r\n                            tickerId={key} />\r\n                    )\r\n                }\r\n                </tbody>\r\n            </Table>\r\n        )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\r\nimport logo from './logo.svg';\r\nimport styled from 'styled-components'\r\n\r\nconst Img = styled.img`\r\n    height: 10vmin;\r\n    pointer-events: none;\r\n`\r\n\r\nconst Header = styled.header`\r\n    background-color: #282c34;\r\n    min-height: 15vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: calc(10px + 2vmin);\r\n    color: white;\r\n`\r\n\r\nconst H1 = styled.h1`\r\n    font-size: 2rem;\r\n`\r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n            <Header className=\"App-header\">\r\n               <Img src={logo} alt=\"React logo\" className=\"App-logo\"/>\r\n               <H1 className=\"App-title\">Exchange</H1>\r\n            </Header>\r\n        )\r\n    }\r\n}\r\n","import React, {useState, useEffect} from 'react';\nimport AccountBalance from './components/AccountBalance/AccountBalance'\nimport CoinList from './components/CoinList/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\nimport styled from 'styled-components'\nimport axios from'axios';\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: antiquewhite;\n  color: rgb(1, 1, 36);\n`\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(2));\n\nfunction App(props) {\n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id =>axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response){\n      const coin = response.data;\n      return{\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price)\n      };\n    })\n    setCoinData(coinPriceData);\n  }\n\n  useEffect(function(){\n    if (coinData.length === 0){\n      //component did mount scenario\n      componentDidMount();\n    } else {\n      //component did update scenario\n    }\n  });\n\n  const handleBalanceVisibilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map(function(values) {\n      let newValues = {...values};\n      if(valueChangeId === values.ticker){\n                newValues.price = newPrice;\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n\n    return (\n      <Div className=\"App\">\n        <ExchangeHeader/>\n        <AccountBalance amount={balance} showBalance={showBalance} handleBalanceVisibilityChange={handleBalanceVisibilityChange}/>\n        <CoinList coinData={coinData} showBalance={showBalance} handleRefresh={handleRefresh}/>\n      </Div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}